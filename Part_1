using System;

namespace Obema_Lab
{
    public class Discipline
    {
        private string name; // Поля класса
        private int contactHours;
        private int selfHours;

        private static int objectCount = 0;  // Статическая переменная для подсчёта объектов

        public string Name // Свойства
        {
            get => name;
            set => name = value;
        }

        public int ContactHours
        {
            get => contactHours;
            set => contactHours = value >= 0 ? value : throw new ArgumentException("Количество аудиторных часов не может быть меньше 0");
        }

        public int SelfHours
        {
            get => selfHours;
            set => selfHours = value >= 0 ? value : throw new ArgumentException("Количество самостоятельных часов не может быть меньше 0");
        }

        public Discipline() // Конструкторы
        {
            name = "Неизвестно";
            contactHours = 0;
            selfHours = 0;
            objectCount++;
        }

        public Discipline(string Name, int contactHours, int selfHours)
        {
            name = Name;
            ContactHours = contactHours;
            SelfHours = selfHours;
            objectCount++;
        }

        public Discipline(Discipline other)
        {
            name = other.name;
            ContactHours = other.ContactHours;
            SelfHours = other.SelfHours;
            objectCount++;
        }

        public void DisplayInfo() // Метод для вывода информации об объекте
        { 
            Console.WriteLine($"Дисциплина: {name}, Аудиторные часы: {ContactHours}, Самостоятельные часы: {SelfHours}");
        }

        public static int CalculateCreditUnitsStatic(int contactHours, int selfHours) // Статическая функция для вычисления зачётных единиц
        {
            int totalHours = contactHours + selfHours;
            return totalHours / 38;
        }

        public int CalculateCreditUnits() // Метод класса для вычисления зачётных единиц
        {
            int totalHours = ContactHours + SelfHours;
            return totalHours / 38;
        }

        public static int GetObjectCount() // Метод для получения количества объектов
        {
            return objectCount;
        }
    }

    public class UserInterface
    {
        public static int CheckInt(string message)
        {
            int number;
            bool IsNumber;
            do
            {
                Console.Write(message);
                IsNumber = int.TryParse(Console.ReadLine(), out number);
                if (!IsNumber || number < -10000 || number > 10000)
                {
                    IsNumber = false;
                    Console.WriteLine("Некорректный ввод целого числа. Число должно быть от -10000 до 10000.");
                }
            } while (!IsNumber);

            return number;
        }

        public static Discipline InputDiscipline()
        {
            Console.Write("Enter discipline name: ");
            string name = Console.ReadLine();

            int contactHours = CheckInt("Enter contact hours: ");

            int selfHours = CheckInt("Enter self-hours hours: ");

            return new Discipline(name, contactHours, selfHours);
        }

        public static void DisplayResult(Discipline discipline)
        {
            discipline.DisplayInfo();
            Console.WriteLine($"Credit Units: {discipline.CalculateCreditUnits()}");
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Дисциплина 1"); //Дисциплины
            Discipline userDiscipline_1 = UserInterface.InputDiscipline();

            Console.WriteLine("Дисциплина 2");
            Discipline userDiscipline_2 = UserInterface.InputDiscipline();

            Discipline userDiscipline_3 = new Discipline(userDiscipline_1);

            UserInterface.DisplayResult(userDiscipline_1); // Вывод результата
            UserInterface.DisplayResult(userDiscipline_2);
            UserInterface.DisplayResult(userDiscipline_3);

            Console.WriteLine(' ');

            Console.WriteLine("Статический метод: Кредиты для дисциплины 1 = " + Discipline.CalculateCreditUnitsStatic(userDiscipline_1.ContactHours, userDiscipline_1.SelfHours)); // Демонстрация вычисления зачётных единиц
            Console.WriteLine("Метод копирования: Кредиты для дисциплины 2 = " + userDiscipline_2.CalculateCreditUnits());

 
            Console.WriteLine("Общее количество дисциплин: " + Discipline.GetObjectCount());
        }
    }
}
 
