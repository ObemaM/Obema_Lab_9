using Obema_Lab;
using System;
using System.Diagnostics.Contracts;

public class Program
{
    public static string NameInput(string input)
    {
        if (!string.IsNullOrEmpty(input))
            return input;
        else
            return "Без названия";
    }

    public static int CheckInt(string message, int min, int max)
    {
        int number;
        bool isNumber;
        do
        {
            Console.Write(message);
            isNumber = int.TryParse(Console.ReadLine(), out number);
            if (!isNumber || number < min || number > max)
            {
                WrongInputForCheckInt(min, max);
                isNumber = false;
            }
        } while (!isNumber);

        return number;
    }

    public static int CheckEvenInt(string message, int min, int max)
    {
        int number;
        bool isNumber;
        do
        {
            Console.Write(message);
            isNumber = int.TryParse(Console.ReadLine(), out number);
            if (!isNumber || number < min || number > max)
            {
                WrongInputForCheckInt(min, max);
                isNumber = false;
            }
            else
            {
                if (number % 2 != 0)
                {
                    WrongInputForEvenCheck();
                    isNumber = false;
                }
            }
        } while (!isNumber);

        return number;
    }

    public static Discipline InputDiscipline()
    {
        string name = Console.ReadLine();

        int contactHours = CheckEvenInt("Введите количество аудиторных часов: ", 0, 10000);
        int selfHours = CheckInt("Введите количество самостоятельных часов: ", 0, 10000);


        return new Discipline(name, contactHours, selfHours);
    }

    public static Discipline InputRandom()
    {
        string name = Console.ReadLine();

        Random random = new Random();
        int contactHours = random.Next(1, 10000);
        int selfHours = random.Next(1, 10000);

        return new Discipline(name, contactHours, selfHours);
    }
    public static void WrongInputForCheckInt(int min, int max)
    {
        Text($"Некорректный ввод! Введите целое число от {min} до {max}.");
    }

    public static void WrongInputForEvenCheck()
    {
        Text($"Некорректный ввод! Число аудиторных часов должно быть четным.");
    }

    public static void Text(string message)
    {
        Console.WriteLine(message);
    }

    public static void SmallText(string message)
    {
        Console.Write(message);
    }

    public static void DisplayArray(Discipline[] displayArray)
    {
        for (int i = 0; i < displayArray.Length; i++)
        {
            Text($"\nДисциплина {i + 1}: ");
            DisplayInfo(displayArray[i]);
        }
    }

    public static void DisplayInfo(Discipline discipline)
    {
        string name = discipline.Name;
        int contactHours = discipline.ContactHours;
        int selfHours = discipline.SelfHours;
        Text($"Название: {name}");
        Text($"Аудиторные часы: {contactHours}");
        Text($"Самостоятельные часы: {selfHours}");
    }

    public static double CalculateAverageCredits(DisciplineArray disciplineArray)
    {
        int totalCredits = 0;
        int totalUnits = 0;
        int disciplineCount = disciplineArray.disciplines.Length;

        for (int i = 0; i < disciplineCount; i++)
        {
            int units = disciplineArray.disciplines[i].CalculateUnits();
            totalCredits += units;
            totalUnits += units * 38;
        }

        return (double)totalCredits / disciplineCount;
    }

    public static void Main(string[] args)
    {
        Text("Дисциплины");
        int len = 1;
        Discipline[] disciplines = new Discipline[len];
        int count = 0;

        while (true)
        {
            Text("\nМеню:");
            Text("1. Добавить дисциплину");
            Text("2. Показать все дисциплины");
            Text("3. Сравнить дисциплины");
            Text("4. Редактировать дисциплину вручную");
            Text("5. Завершить ввод (Часть 1 и 2)");
            Text("6. Массив дисциплин (Часть 3)");
            Text("7. Выход из программы");
            int choice = CheckInt("Введите номер действия: ", 1, 7);

            switch (choice)
            {
                case 1:
                    {
                        if (len >= 10)
                        {
                            Text($"\nДостигнуто максимальное количество дисциплин - {len}");
                            break;
                        }
                        else
                        {
                            Text("\n1. Добавить дисциплину вручную");
                            Text("2. Добавить дисциплину рандомно");

                            int how = CheckInt("Введите номер действия: ", 1, 2);

                            switch (how)
                            {
                                case 1:
                                    {
                                        if (count == len)
                                        {
                                            len++;
                                            Discipline[] temp = new Discipline[len];
                                            for (int i = 0; i < disciplines.Length; i++)
                                                temp[i] = disciplines[i];
                                            disciplines = temp;
                                        }

                                        SmallText("\nВведите название: ");
                                        disciplines[len - 1] = InputDiscipline();
                                        Text("\nДисциплина добавлена");
                                        count++;
                                        break;
                                    }
                                case 2:
                                    {
                                        if (count == len)
                                        {
                                            len++;
                                            Discipline[] temp = new Discipline[len];
                                            for (int i = 0; i < disciplines.Length; i++)
                                                temp[i] = disciplines[i];
                                            disciplines = temp;
                                        }

                                        SmallText("\nВведите название: ");
                                        disciplines[len - 1] = InputRandom();
                                        Text("\nДисциплина добавлена");
                                        count++;
                                        break;
                                    }
                            }
                        }
                        break;
                    }
                case 2:
                    if (count == 0)
                        Text("\nНет добавленных дисциплин");
                    else
                    {
                        ConsoleColor originalColor = Console.ForegroundColor;
                        Console.ForegroundColor = ConsoleColor.Blue;
                        Text($"\nДисциплины");
                        Console.ForegroundColor = originalColor;

                        for (int i = 0; i < len; i++)
                        {
                            Text($"\nИнформация о дисциплине {i + 1}:");
                            DisplayInfo(disciplines[i]);
                        }
                    }
                    break;
                case 3:
                    {
                        if (len > 1)
                        {
                            int first = CheckInt("\nВыберите номер дисциплины для сравнения: ", 1, len);
                            int second = CheckInt($"Выберите номер дисциплины для сравнения с дисциплиной {first}: ", 1, len);
                            if (disciplines[first - 1].Equals(disciplines[second - 1]))
                                Text("\nДисциплины одинаковы");
                            else
                                Text("\nДисциплины различаются");
                        }
                        else
                            Text("\nДисциплин слишком мало");
                        break;
                    }
                case 4:
                    {
                        if (len > 1)
                        {
                            int number = CheckInt("Выберите номер дисциплины для редактирования: ", 1, len);
                            SmallText("\nВведите название: ");
                            disciplines[number - 1] = InputDiscipline();
                            Text("Дисциплина отредактирована");
                        }
                        else
                            Text("\nДисциплин слишком мало");
                        break;
                    }
                case 5:
                    if (count == 0)
                        Text("\nМассив дисциплин пуст");
                    else
                    {
                        for (int i = 0; i < len; i++)
                        {
                            ConsoleColor originalColor = Console.ForegroundColor;
                            Console.ForegroundColor = ConsoleColor.Green;
                            Text($"\nДисциплина {i + 1}");
                            Console.ForegroundColor = originalColor;

                            Text("\nЧасть 1");
                            Text($"\nКредиты для дисциплины {i + 1}: {Discipline.CalculateUnitsStatic(disciplines[i])}");
                            Text("Метод копирования: Кредиты для дисциплины 1: " + disciplines[0].CalculateUnits());
                            Text("Общее количество дисциплин: " + Discipline.GetObjectCount());

                            Text("\nЧасть 2");
                            try
                            {
                                disciplines[i] = ++disciplines[i];
                                DisplayInfo(disciplines[i]);
                            }
                            catch (Exception ex)
                            {
                                Text($"Увеличение количества аудиторных часов невозможно: {ex.Message}");
                            }

                            int uneven = disciplines[i];
                            Text($"\nДоля самостоятельной работы у дисциплины {i + 1}: {Math.Round(!disciplines[i], 3)}");
                            Text($"Доля аудиторной работы у дисциплины {i + 1}: {Math.Round((double)disciplines[i], 3)}");
                            Text($"Количество пар по дисциплине {i + 1}: {uneven}");

                            Text("\nСравнение по количеству зачетных единиц: ");
                            if (i == 1 && i + 1 < len)
                            {
                                if (disciplines[i] >= disciplines[i + 1])
                                    Text($"\nДисциплина {i} >= Дисциплина {i + 1}");
                                else
                                    Text($"\nДисциплина {i} < Дисциплина {i + 1}");
                            }
                            if (i == 2 && i + 1 < len)
                            {
                                if (disciplines[i] <= disciplines[i + 1])
                                    Text($"\nДисциплина {i} <= Дисциплина {i + 1}");
                                else
                                    Text($"\nДисциплина {i} > Дисциплина {i + 1}");
                            }
                        }
                    }
                    break;
                case 6:
                    int max = DisciplineArray.GetCollectionCount();
                    if (max >= 10)
                    {
                        Text($"Достигнуто максимальное количество массивов дисциплин - {max}");
                        break;
                    }
                    else
                    {
                        int number = CheckInt("\nВведите количество дисциплин в массиве: ", 1, 10);
                        DisciplineArray disciplineArray = new DisciplineArray(number);

                        ConsoleColor originalColor = Console.ForegroundColor;
                        Console.ForegroundColor = ConsoleColor.Red;
                        Text($"\nМассив дисциплин");
                        Console.ForegroundColor = originalColor;
                        Discipline[] displayArray = disciplineArray.DisplayAll();
                        DisplayArray(displayArray);

                        Text($"\nСредневзвешенное количество зачётных единиц: {Math.Round(CalculateAverageCredits(disciplineArray), 3)}");

                        Text("\nРабота с индексатором в данном массиве:");
                        try
                        {
                            int index = CheckInt("\nВведите индекс дисциплины в массиве: ", -100, 100);
                            Text($"Изменение дисциплины по индексу {index}.");
                            SmallText("\nВведите название: ");
                            disciplineArray[index] = new Discipline(NameInput(Console.ReadLine()), CheckInt("Введите количество аудиторных часов: ", 1, 10000), CheckInt("Введите количество самостоятельных часов: ", 1, 10000));
                            DisplayInfo(disciplineArray[index]);
                        }
                        catch (Exception ex)
                        {
                            Text($"\nОшибка: {ex.Message}");
                        }

                        Text("\nКопирование массива:");
                        DisciplineArray copiedArray = new DisciplineArray(disciplineArray);
                        Discipline[] displayCopy = copiedArray.DisplayAll();
                        DisplayArray(displayCopy);
                        Console.ForegroundColor = ConsoleColor.Red;
                        Text($"\nКопирование завершено");
                        Console.ForegroundColor = originalColor;

                        Text($"\nКоличество созданных коллекций (с учетом копирования): {DisciplineArray.GetCollectionCount()}");
                        break;
                    }
                case 7:
                    Text("\nВыход из программы...");
                    return;
            }
        }
    }
}
